// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text;
using CSharp.Choices;
using System.Linq;

namespace StackUnderflow.Domain.Core.Contexts.Question.CreateQuestion
{
    public static partial class CreateQuestionResult
    {
        public static ICreateQuestionResult Match(this ICreateQuestionResult self, System.Func<QuestionCreated, ICreateQuestionResult> whenQuestionCreated, System.Func<QuestionNotCreated, ICreateQuestionResult> whenQuestionNotCreated, System.Func<QuestionPublished, ICreateQuestionResult> whenQuestionPublished, System.Func<QuestionNotPublished, ICreateQuestionResult> whenQuestionNotPublished)
        {
            switch ((self))
            {
                case QuestionCreated questioncreated:
                    return whenQuestionCreated(questioncreated);
                case QuestionNotCreated questionnotcreated:
                    return whenQuestionNotCreated(questionnotcreated);
                case QuestionPublished questionpublished:
                    return whenQuestionPublished(questionpublished);
                case QuestionNotPublished questionnotpublished:
                    return whenQuestionNotPublished(questionnotpublished);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }

        public static async System.Threading.Tasks.Task<ICreateQuestionResult> MatchAsync(this ICreateQuestionResult self, System.Func<QuestionCreated, System.Threading.Tasks.Task<ICreateQuestionResult>> whenQuestionCreated, System.Func<QuestionNotCreated, System.Threading.Tasks.Task<ICreateQuestionResult>> whenQuestionNotCreated, System.Func<QuestionPublished, System.Threading.Tasks.Task<ICreateQuestionResult>> whenQuestionPublished, System.Func<QuestionNotPublished, System.Threading.Tasks.Task<ICreateQuestionResult>> whenQuestionNotPublished)
        {
            switch ((self))
            {
                case QuestionCreated questioncreated:
                    return await whenQuestionCreated(questioncreated);
                case QuestionNotCreated questionnotcreated:
                    return await whenQuestionNotCreated(questionnotcreated);
                case QuestionPublished questionpublished:
                    return await whenQuestionPublished(questionpublished);
                case QuestionNotPublished questionnotpublished:
                    return await whenQuestionNotPublished(questionnotpublished);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }

        public static R Match<R>(this ICreateQuestionResult self, System.Func<QuestionCreated, R> whenQuestionCreated, System.Func<QuestionNotCreated, R> whenQuestionNotCreated, System.Func<QuestionPublished, R> whenQuestionPublished, System.Func<QuestionNotPublished, R> whenQuestionNotPublished)
        {
            switch ((self))
            {
                case QuestionCreated questioncreated:
                    return whenQuestionCreated(questioncreated);
                case QuestionNotCreated questionnotcreated:
                    return whenQuestionNotCreated(questionnotcreated);
                case QuestionPublished questionpublished:
                    return whenQuestionPublished(questionpublished);
                case QuestionNotPublished questionnotpublished:
                    return whenQuestionNotPublished(questionnotpublished);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }

        public static async System.Threading.Tasks.Task<R> MatchAsync<R>(this ICreateQuestionResult self, System.Func<QuestionCreated, System.Threading.Tasks.Task<R>> whenQuestionCreated, System.Func<QuestionNotCreated, System.Threading.Tasks.Task<R>> whenQuestionNotCreated, System.Func<QuestionPublished, System.Threading.Tasks.Task<R>> whenQuestionPublished, System.Func<QuestionNotPublished, System.Threading.Tasks.Task<R>> whenQuestionNotPublished)
        {
            switch ((self))
            {
                case QuestionCreated questioncreated:
                    return await whenQuestionCreated(questioncreated);
                case QuestionNotCreated questionnotcreated:
                    return await whenQuestionNotCreated(questionnotcreated);
                case QuestionPublished questionpublished:
                    return await whenQuestionPublished(questionpublished);
                case QuestionNotPublished questionnotpublished:
                    return await whenQuestionNotPublished(questionnotpublished);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }
    }
}